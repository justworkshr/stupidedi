require "spec_helper"
using Stupidedi::Refinements

describe Stupidedi::Versions::FunctionalGroups::FiftyTen::ElementTypes do
  describe "FixnumVal" do

    let(:x5010) { Stupidedi::Versions::FunctionalGroups::FiftyTen }
    let(:types) { x5010::ElementTypes }
    let(:req)   { x5010::ElementReqs }
    let(:rep)   { Stupidedi::Schema::RepeatCount }

    # Dummy element definition E1: min/max length 4/6, two decimal places
    let(:eldef) { types::Nn.new(:E1, "Numeric Element", 4, 6, 2) }
    let(:eluse) { eldef.simple_use(req::Mandatory, rep.bounded(1)) }

    # Dummy file position
    let(:position) { Stupidedi::Reader::Position.new(100, 4, 19, "test.x12") }

    context "Invalid" do
    end

    context "Empty" do
      let(:el) { eluse.value("", position) }

      describe "#position" do
        specify { el.position.should == position }
      end

      describe "#empty?" do
        specify { el.should be_empty }
      end

      describe "#valid?" do
        specify { el.should be_valid }
      end

      describe "#too_short?" do
        specify { el.should_not be_too_short }
      end

      describe "#too_short?" do
        specify { el.should_not be_too_long }
      end

      describe "#map" do
        specify { el.map { "123" }.should == "1.23" }
        specify { el.map { "123" }.should be_numeric }
      end

      describe "#to_s" do
        specify { el.to_s.should == "" }
      end

      describe "#to_x12" do
        context "with truncation" do
          specify { el.to_x12(true).should == "" }
          specify { el.to_x12(true).should be_a(String) }
        end

        context "without truncation" do
          specify { el.to_x12(false).should == "" }
          specify { el.to_x12(false).should be_a(String) }
        end
      end

      describe "#==" do
        specify { el.should == el }
        specify { el.should == nil }
        specify { el.should == eluse.value("", position) }
      end
    end

    context "NonEmpty" do

      # include Comparable
      describe "relational operators" do
        let(:a) { eluse.value("1234", position) }
        let(:b) { eluse.value("1235", position) }

        specify { a.to_d.should <  b.to_d }
        specify { a.to_d.should <  b }
        specify { a.should <  b.to_d }
        specify { a.should <  b }

        specify { a.to_d.should <= b.to_d }
        specify { a.to_d.should <= b }
        specify { a.should <= b.to_d }
        specify { a.should <= b }

        specify { b.to_d.should >  a.to_d }
        specify { b.to_d.should >  a }
        specify { b.should >  a.to_d }
        specify { b.should >  a }

        specify { b.to_d.should >= a.to_d }
        specify { b.to_d.should >= a }
        specify { b.should >= a.to_d }
        specify { b.should >= a }

        specify { a.to_d.should <= a.to_d }
        specify { a.to_d.should <= a }
        specify { a.should <= a.to_d }
        specify { a.should <= a }

        specify { b.to_d.should == b.to_d }
        specify { b.to_d.should == b }
        specify { b.should == b.to_d }
        specify { b.should == b }

        specify { a.to_d.should <= a.to_d }
        specify { a.to_d.should <= a }
        specify { a.should <= a.to_d }
        specify { a.should <= a }

        specify { a.to_d.should >= a.to_d }
        specify { a.to_d.should >= a }
        specify { a.should >= a.to_d }
        specify { a.should >= a }

        specify { b.to_d.should <= b.to_d }
        specify { b.to_d.should <= b }
        specify { b.should <= b.to_d }
        specify { b.should <= b }

        specify { b.to_d.should >= b.to_d }
        specify { b.to_d.should >= b }
        specify { b.should >= b.to_d }
        specify { b.should >= b }

        specify { a.to_d.should_not == b.to_d }
        specify { a.to_d.should_not == b }
        specify { a.should_not == b.to_d }
        specify { a.should_not == b }

        specify { b.to_d.should_not == a.to_d }
        specify { b.to_d.should_not == a }
        specify { b.should_not == a.to_d }
        specify { b.should_not == a }
      end

      describe "arithmetic operators" do
        let(:a) { eluse.value("1050", position) } # 10.50
        let(:b) { eluse.value("0200", position) } #  2.00

        specify { (a.to_d / b.to_d).should == "5.25".to_d }
        specify { (a / b.to_d).should == "5.25".to_d }
        specify { (a.to_d / b).should == "5.25".to_d }
        specify { (a / b).should == "5.25".to_d }

        specify { (a.to_d * b.to_d).should == "21.0".to_d }
        specify { (a * b.to_d).should == "21.0".to_d }
        specify { (a.to_d * b).should == "21.0".to_d }
        specify { (a * b).should == "21.0".to_d }

        specify { (a.to_d + b.to_d).should == "12.5".to_d }
        specify { (a + b.to_d).should == "12.5".to_d }
        specify { (a.to_d + b).should == "12.5".to_d }
        specify { (a + b).should == "12.5".to_d }

        specify { (a.to_d - b.to_d).should == "8.5".to_d  }
        specify { (a - b.to_d).should == "8.5".to_d  }
        specify { (a.to_d - b).should == "8.5".to_d  }
        specify { (a - b).should == "8.5".to_d  }

        specify { (a.to_d % b.to_d).should == "0.5".to_d }
        specify { (a % b.to_d).should == "0.5".to_d }
        specify { (a.to_d % b).should == "0.5".to_d }
        specify { (a % b).should == "0.5".to_d }

        specify { (-a).should == "-10.50".to_d }
        specify { (-a).abs.should == a }
        specify { (+a).should == a }
      end

    end

  end
end
